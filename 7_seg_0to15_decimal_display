module dis(num,seg1,seg2);

	input [3:0]num;
	output [6:0]seg1,seg2;
	reg [3:0]num1,num2;/*synthisis keep*/
	s7segment_4bit_hexa_display n1(num1,seg1);
	s7segment_4bit_hexa_display n2(num2,seg2);
	
	always@(*)
	if(num<=9)
	begin
		 num2<=4'b0;
		 num1<=num;
	end
		 
	else
begin	
		num2<=4'b1;
		case(num)
		4'd10:num1<=4'd0;
		4'd11:num1<=4'd1;
		4'd12:num1<=4'd2;
		4'd13:num1<=4'd3;
		4'd14:num1<=4'd4;
		4'd15:num1<=4'd5;
		
		endcase
end


	
endmodule	
	
	
	
	


















module s7segment_4bit_hexa_display(num,sig);

	input [3:0]num;
	output [6:0]sig;
	reg [6:0] sig;
	
	always@(num)
	case(num)
		
  /*
		0
   -------|
  |       |
  | 1     |5
  |     6 |
  ---------
  |       |
  | 2     |4
  |     3 |
  ---------
  
  */

	4'h0:sig=7'b1111110;
	4'h1:sig=7'b0000110;
	4'h2:sig=7'b1011011;
	4'h3:sig=7'b1001111;
	4'h4:sig=7'b0100111;
	4'h5:sig=7'b1101101;
	4'h6:sig=7'b1111101;
	4'h7:sig=7'b1000111;
	4'h8:sig=7'b1111111;
	4'h9:sig=7'b1101111;
	4'ha:sig=7'b1110110;
	4'hb:sig=7'b0111101;
	4'hc:sig=7'b1111000;
	4'hd:sig=7'b0011111;
	4'he:sig=7'b1111001;
	4'hf:sig=7'b1110001;
	
	
	
	
	
	endcase
	
	
	
endmodule	
	
