// Code your testbench here
// or browse Examples
// Code your testbench here
// or browse Examples
// Code your design here
`timescale 1ns / 1ns
module test();
	reg CLOCK_50;
	wire [3:0]data_out_a,data_out_b;
	reg [4:0] addr_a,addr_b;
	reg wirte_a,read_a,read_b,write_b;
	reg [3:0]data_in_a,data_in_b;
	parameter CLOCK_PERIOD=2;
	
	memory_ram_dual_port b(CLOCK_50,wirte_a,read_a,read_b,write_b,data_in_a,data_in_b,addr_a,addr_b,data_out_a,data_out_b);

	initial begin
			CLOCK_50 <= 1'b0;
		end // initial
		always @ (*)
		begin : Clock_Generator
			#((CLOCK_PERIOD) / 2) 
			CLOCK_50 <= ~CLOCK_50;
		end
	
	
	initial
	begin
	wirte_a=0;read_a=0;read_b=0;write_b=0;
	addr_a=0;addr_b=1;
	data_in_a<=1;data_in_b<=2;
	end
	
	

	
	
	
	initial
	begin
	
	#3;wirte_a<=1;read_a<=0;read_b<=0;write_b<=1;
	data_in_a<=1;data_in_b<=2;
	
	#2;wirte_a<=1;read_a<=1;read_b<=1;write_b<=1;
	data_in_a<=3;data_in_b<=4;
	
	#2;wirte_a<=0;read_a<=1;read_b<=1;write_b<=0;
	data_in_a<=3;data_in_b<=4;
		#2;wirte_a<=1;read_a<=0;read_b<=0;write_b<=1;
	data_in_a<=5;data_in_b<=5;
	
	
	
	
	
	
	
	
	
	
	
	end
	
	
	
	initial
	begin
	#1000 $stop;
	end
	initial
  begin
    $dumpfile("dump.vcd");
    $dumpvars(1);
  end
	
	

endmodule
